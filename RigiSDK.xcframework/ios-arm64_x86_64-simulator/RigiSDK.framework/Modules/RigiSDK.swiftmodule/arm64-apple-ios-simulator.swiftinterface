// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios15.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature OpaqueTypeErasure -enable-bare-slash-regex -module-name RigiSDK
import Compression
import CryptoKit
import Foundation
import Swift
import SwiftUI
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class RigiIni {
  public static let shared: RigiSDK.RigiIni
  public func load(from path: Swift.String? = nil) throws
  public func value(for key: Swift.String) -> Swift.String?
  public var allSettings: [Swift.String : Swift.String] {
    get
  }
  public func getServerCredentials() throws -> RigiSDK.ServerCredentials
  public func getProjectUrl() throws -> Swift.String
  public func getSourceLanguage() -> Swift.String?
  public func getPseudoLanguage() -> Swift.String?
  public func pseudoPrefix() -> Swift.String
  public func pseudoSuffix() -> Swift.String
  @objc deinit
}
extension Swift.String {
  public var rigiKey: Swift.String? {
    get
  }
}
extension Swift.String {
  public func replace(_ pattern: Swift.String, with: Swift.String) -> Swift.String
}
extension Swift.String {
  public func match(_ regex: Swift.String) -> [[Swift.String]]
}
extension Swift.String {
  public mutating func replaceGroups(matching regex: Foundation.NSRegularExpression, with template: Swift.String, options: Foundation.NSRegularExpression.MatchingOptions = [])
  public func replacingGroups(matching regex: Foundation.NSRegularExpression, with transformationString: Swift.String) -> Swift.String
}
@_hasMissingDesignatedInitializers public class RigiFileSystem {
  public static var rigiDir: Swift.String? {
    get
  }
  @objc deinit
}
public struct RigiString : Swift.Codable {
  public let fileOriginal: Swift.String
  public let unitId: Swift.String
  public let source: Swift.String
  public let stringId: Swift.String
  public let scannableString: Swift.String
  public let tokenisedString: Swift.String?
  public let signature: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class RigiStrings {
  public static let shared: RigiSDK.RigiStrings
  public var strings: [Swift.String : RigiSDK.RigiString]
  public func load() throws
  public func findString(scanned: Swift.String) -> RigiSDK.RigiString?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Output {
  public static func log(_ line: Swift.String? = nil)
  public static func step(_ line: Swift.String)
  public static func tip(_ line: Swift.String)
  public static func error(_ line: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RigCommands {
  public static func prepareLocalizations(localizationFolder: Swift.String, rigiFolder: Swift.String, outputFolder: Swift.String) async throws
  public static func uploadLocalizationFiles(rigiFolder: Swift.String) async throws
  public static func uploadLocalizationSource(rigiSourceFile: Swift.String) async throws
  public static func handleDownloadLocalizations(metaFile: Swift.String, downloadFolder: Swift.String, outputFolder: Swift.String, language: Swift.String? = nil) async throws
  public static func collectPreviews(previewsFolder: Swift.String?, rigiFolder: Swift.String) async throws
  public static func uploadPreviews(rigiFolder: Swift.String) async throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RigiScreenshotter {
  @_Concurrency.MainActor public static func appWindow() -> UIKit.UIWindow?
  @_Concurrency.MainActor public static func getScreenshot() -> UIKit.UIImage?
  @objc deinit
}
public struct RigiSettings {
  public enum ClipBounds {
    case screen
    case upperViewController
    public static func == (a: RigiSDK.RigiSettings.ClipBounds, b: RigiSDK.RigiSettings.ClipBounds) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DivPosition {
    case topleft
    case center
    public static func == (a: RigiSDK.RigiSettings.DivPosition, b: RigiSDK.RigiSettings.DivPosition) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum AlignmentStrategy {
    case left
    case center
    case neighbours
    public static func == (a: RigiSDK.RigiSettings.AlignmentStrategy, b: RigiSDK.RigiSettings.AlignmentStrategy) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var debugScanning: Swift.Bool
  public var debugMatching: Swift.Bool
  public var useAccurateScanning: Swift.Bool
  public var strokeColorTolerance: Swift.Double
  public var strokeLineOffsets: [CoreFoundation.CGFloat]
  public var alignmentStrategy: RigiSDK.RigiSettings.AlignmentStrategy
  public var alignmentMargin: Swift.Int
  public var alignmentDifferenceTreshhold: Swift.Int
  public var alignmentColorTolerance: Swift.Double
  public var loggingEnabled: Swift.Bool
  public var isButtonVisible: Swift.Bool
  public var addFileTimestamps: Swift.Bool
  public var enableAutoScanning: Swift.Bool
  public var autoScanInterval: Swift.Double
  public var autoScanCaptureDelay: Swift.Double
  public var onlyScanUpperViewController: Swift.Bool
  public var autoClearTextFields: Swift.Bool
  public var additionalUpperViewControllers: [Swift.String]
  public var minimumOnscreenHorz: Swift.Double
  public var minimumOnscreenVert: Swift.Double
  public var clipOffscreen: Swift.Bool
  public var clipStyle: RigiSDK.RigiSettings.ClipBounds
  public var expandToButton: Swift.Bool
  public var addDeviceBezels: Swift.Bool
  public var previewPosition: RigiSDK.RigiSettings.DivPosition
  public var addLabelBorders: Swift.Bool
  public var labelBorderColor: Swift.String
  public var includeAppleWebFonts: Swift.Bool
  public var includedAppleWebFonts: Swift.String
  public var includedFontStyles: Swift.String
  public var includedBodyStyles: Swift.String
  public var fontStyleClasses: [Swift.String : Swift.String]
}
public class RigiButtonManager {
  public static let shared: RigiSDK.RigiButtonManager
  public init()
  public func initButton(callback: @escaping () async -> Swift.Void)
  @_Concurrency.MainActor public func hideButton()
  @_Concurrency.MainActor public func showButton()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Rigi {
  public static let version: Swift.String
  public static let shared: RigiSDK.Rigi
  public static func start(_ configuration: ((inout RigiSDK.RigiSettings) -> Swift.Void)? = nil)
  public func launch()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RigiScannerOcr {
  public static let shared: RigiSDK.RigiScannerOcr
  public func performScan() async -> RigiSDK.ScanResult?
  @objc deinit
}
public struct ScanResult {
}
public struct LabelInfo {
}
@_hasMissingDesignatedInitializers public class RigiScanner {
  public static let shared: RigiSDK.RigiScanner
  public func performScan() async
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RigiPreviews {
  public static let shared: RigiSDK.RigiPreviews
  public func savePreview(scanResult: RigiSDK.ScanResult)
  @objc deinit
}
public var debugLoggingEnabled: Swift.Bool
public enum RigiLogLevel : Swift.String {
  case debug
  case verbose
  case warning
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class RigiLogger {
  public static func log(_ level: RigiSDK.RigiLogLevel = .verbose, _ message: Swift.String, _ error: (any Swift.Error)? = nil)
  @objc deinit
}
public struct ServerCredentials {
}
@_hasMissingDesignatedInitializers public class RigiDebug {
  public static var data: Swift.String
  public static func clear()
  public static func add(_ message: Swift.String)
  @objc deinit
}
extension RigiSDK.RigiSettings.ClipBounds : Swift.Equatable {}
extension RigiSDK.RigiSettings.ClipBounds : Swift.Hashable {}
extension RigiSDK.RigiSettings.DivPosition : Swift.Equatable {}
extension RigiSDK.RigiSettings.DivPosition : Swift.Hashable {}
extension RigiSDK.RigiSettings.AlignmentStrategy : Swift.Equatable {}
extension RigiSDK.RigiSettings.AlignmentStrategy : Swift.Hashable {}
extension RigiSDK.RigiLogLevel : Swift.Equatable {}
extension RigiSDK.RigiLogLevel : Swift.Hashable {}
extension RigiSDK.RigiLogLevel : Swift.RawRepresentable {}
